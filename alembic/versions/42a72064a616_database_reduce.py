"""database reduce

Revision ID: 42a72064a616
Revises: 07f7771afffe
Create Date: 2024-09-27 19:29:56.594222

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '42a72064a616'
down_revision: Union[str, None] = '07f7771afffe'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('DROP TABLE IF EXISTS program_type CASCADE')
    op.execute('DROP TABLE IF EXISTS represent_research_group CASCADE')
    op.execute('DROP TABLE IF EXISTS user_research_group CASCADE')
    op.execute('DROP TABLE IF EXISTS administrative_type CASCADE')
    op.execute('DROP TABLE IF EXISTS represent_academic_unit CASCADE')
    op.execute('DROP TABLE IF EXISTS academic_council CASCADE')
    op.execute('DROP TABLE IF EXISTS student CASCADE')
    op.execute('DROP TABLE IF EXISTS research_group CASCADE')
    op.execute('DROP TABLE IF EXISTS administrative CASCADE')
    op.execute('DROP TABLE IF EXISTS professor_type CASCADE')
    op.execute('DROP TABLE IF EXISTS program CASCADE')
    op.execute('DROP TABLE IF EXISTS academic_council_type CASCADE')
    op.execute('DROP TABLE IF EXISTS user_academic_council CASCADE')
    op.execute('DROP TABLE IF EXISTS represent_program CASCADE')
    op.execute('DROP TABLE IF EXISTS professor CASCADE')
    op.drop_column('academic_unit', 'description')
    op.add_column('rol', sa.Column('academic_unit_id', sa.Uuid(), nullable=False))
    op.alter_column('rol', 'scope',
               existing_type=sa.INTEGER(),
               type_=sa.String(length=100),
               existing_nullable=False)
    op.drop_constraint('rol_name_key', 'rol', type_='unique')
    op.create_unique_constraint(None, 'user', ['identification_number'])
    op.add_column('user_rol', sa.Column('is_active', sa.Boolean(), nullable=False))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('user_rol', 'is_active')
    op.drop_constraint(None, 'user', type_='unique')
    op.create_unique_constraint('rol_name_key', 'rol', ['name'])
    op.alter_column('rol', 'scope',
               existing_type=sa.String(length=100),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('rol', 'academic_unit_id')
    op.add_column('academic_unit', sa.Column('description', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
    op.create_table('professor',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('academic_unit_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('professor_type_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['academic_unit_id'], ['academic_unit.id'], name='professor_academic_unit_id_fkey'),
    sa.ForeignKeyConstraint(['professor_type_id'], ['professor_type.id'], name='professor_professor_type_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='professor_user_id_fkey'),
    sa.PrimaryKeyConstraint('user_id', name='professor_pkey')
    )
    op.create_table('represent_program',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('program_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['program_id'], ['program.id'], name='represent_program_program_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='represent_program_user_id_fkey'),
    sa.PrimaryKeyConstraint('user_id', 'program_id', name='represent_program_pkey')
    )
    op.create_table('user_academic_council',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('academic_council_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['academic_council_id'], ['academic_council.id'], name='user_academic_council_academic_council_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='user_academic_council_user_id_fkey'),
    sa.PrimaryKeyConstraint('user_id', 'academic_council_id', name='user_academic_council_pkey')
    )
    op.create_table('academic_council_type',
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='academic_council_type_pkey'),
    sa.UniqueConstraint('name', name='academic_council_type_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('program',
    sa.Column('academic_unit_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('program_type_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['academic_unit_id'], ['academic_unit.id'], name='program_academic_unit_id_fkey'),
    sa.ForeignKeyConstraint(['program_type_id'], ['program_type.id'], name='program_program_type_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='program_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('professor_type',
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='professor_type_pkey')
    )
    op.create_table('administrative',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('academic_unit_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('administrative_type_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['academic_unit_id'], ['academic_unit.id'], name='administrative_academic_unit_id_fkey'),
    sa.ForeignKeyConstraint(['administrative_type_id'], ['administrative_type.id'], name='administrative_administrative_type_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='administrative_user_id_fkey'),
    sa.PrimaryKeyConstraint('user_id', name='administrative_pkey')
    )
    op.create_table('research_group',
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('academic_unit_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['academic_unit_id'], ['academic_unit.id'], name='research_group_academic_unit_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='research_group_pkey'),
    sa.UniqueConstraint('name', name='research_group_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('student',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('program_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['program_id'], ['program.id'], name='student_program_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='student_user_id_fkey'),
    sa.PrimaryKeyConstraint('user_id', name='student_pkey')
    )
    op.create_table('academic_council',
    sa.Column('academic_unit_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('academic_council_type_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['academic_council_type_id'], ['academic_council_type.id'], name='academic_council_academic_council_type_id_fkey'),
    sa.ForeignKeyConstraint(['academic_unit_id'], ['academic_unit.id'], name='academic_council_academic_unit_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='academic_council_pkey')
    )
    op.create_table('represent_academic_unit',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('academic_unit_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['academic_unit_id'], ['academic_unit.id'], name='represent_academic_unit_academic_unit_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='represent_academic_unit_user_id_fkey'),
    sa.PrimaryKeyConstraint('user_id', 'academic_unit_id', name='represent_academic_unit_pkey')
    )
    op.create_table('administrative_type',
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='administrative_type_pkey')
    )
    op.create_table('user_research_group',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('research_group_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['research_group_id'], ['research_group.id'], name='user_research_group_research_group_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='user_research_group_user_id_fkey'),
    sa.PrimaryKeyConstraint('user_id', 'research_group_id', name='user_research_group_pkey')
    )
    op.create_table('represent_research_group',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('research_group_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['research_group_id'], ['research_group.id'], name='represent_research_group_research_group_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='represent_research_group_user_id_fkey'),
    sa.PrimaryKeyConstraint('user_id', 'research_group_id', name='represent_research_group_pkey')
    )
    op.create_table('program_type',
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='program_type_pkey'),
    sa.UniqueConstraint('name', name='program_type_name_key')
    )
    # ### end Alembic commands ###
